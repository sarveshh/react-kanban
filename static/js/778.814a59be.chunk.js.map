{"version":3,"file":"static/js/778.814a59be.chunk.js","mappings":"4PAKMA,EAAS,CACb,CAAEC,MAAO,UAAWC,MAAO,aAC3B,CAAED,MAAO,UAAWC,MAAO,qBAGd,SAASC,IACtB,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,YAAYH,UAElDI,EAAsBJ,EACzBK,KAAI,SAACC,GACJ,OAAOA,EAAMC,MAAMC,QAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAKC,aAAoBC,UAE9DC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAErBC,EAAaf,EAChBK,KAAI,SAACC,GACJ,OAAOA,EAAMC,MAAMI,UAEpBC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAIrBE,EAAO,CACX,CAAEC,KAAM,YAAaC,MAAOd,GAC5B,CAAEa,KAAM,cAAeC,MAJIH,EAAaX,IAMpCe,EAASC,KAAKC,GAAK,IA0BzB,OACE,gCACGzB,EAAOS,KAAI,SAACiB,EAAGC,GAAJ,OACV,UAAC,IAAD,CAAKC,QAAQ,OAAOC,WAAW,SAA/B,WACE,SAAC,IAAD,CACEC,GAAI,CACFC,MAAO,OACPC,OAAQ,OACRC,gBAAgB,GAAD,OAAKP,EAAEzB,OACtBiC,YAAa,WAGjB,SAAC,IAAD,UAAaR,EAAExB,UAT4ByB,MAa9CR,EAAa,GACZ,SAAC,IAAD,CAAqBY,MAAM,OAAOC,OAAO,OAAzC,UACE,SAAC,IAAD,CAAUD,MAAO,IAAKC,OAAQ,IAA9B,UACE,SAAC,IAAD,CACEZ,KAAMA,EACNe,GAAG,MACHC,GAAG,MACHC,WAAW,EACXnC,MAjDkB,SAAC,GAOxB,IANLiC,EAMI,EANJA,GACAC,EAKI,EALJA,GACAE,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAC,EACI,EADJA,QAEMC,EAASH,EAA4C,IAA7BC,EAAcD,GACtCI,EAAIR,EAAKO,EAASlB,KAAKoB,KAAKN,EAAWf,GACvCsB,EAAIT,EAAKM,EAASlB,KAAKsB,KAAKR,EAAWf,GAE7C,OACE,iBACEoB,EAAGA,EACHE,EAAGA,EACHE,KAAK,QACLC,WAAYL,EAAIR,EAAK,QAAU,MAC/Bc,iBAAiB,UALnB,oBAOiB,IAAVR,GAAeS,QAAQ,GAP9B,QAqCQV,YAAa,GACbO,KAAK,UACLI,QAAQ,QARV,SAUG/B,EAAKX,KAAI,SAAC2C,EAAOzB,GAAR,OACR,SAAC,IAAD,CAEEoB,KACE/C,EAAOS,KAAI,SAACR,EAAOoD,GAAR,OAAepD,EAAMA,SAC9B0B,EAAQ3B,EAAOe,SAJrB,eACeY,cAYvB,SAAC,IAAD,CAAKC,QAAQ,OAAO0B,eAAe,SAASxB,GAAI,CAAEyB,GAAI,IAAtD,UACE,SAAC,IAAD,CAAYC,QAAQ,YAAYvD,MAAM,UAAtC","sources":["components/Dashboard/PieChart.js"],"sourcesContent":["import React from \"react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport { Box, Typography } from \"@mui/material\";\n\nconst COLORS = [\n  { color: \"#0088FE\", label: \"Completed\" },\n  { color: \"#00C49F\", label: \"Incomplete Tasks\" },\n];\n\nexport default function SmallPieChart() {\n  const boards = useSelector((state) => state.taskManager.boards);\n\n  const totalCompletedCards = boards\n    .map((board) => {\n      return board.cards.filter((card) => card.completed === true).length;\n    })\n    .reduce((a, b) => a + b, 0);\n\n  const totalCards = boards\n    .map((board) => {\n      return board.cards.length;\n    })\n    .reduce((a, b) => a + b, 0);\n\n  const totalIncompleteCards = totalCards - totalCompletedCards;\n\n  const data = [\n    { name: \"Completed\", value: totalCompletedCards },\n    { name: \"Uncompleted\", value: totalIncompleteCards },\n  ];\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <>\n      {COLORS.map((c, index) => (\n        <Box display=\"flex\" alignItems=\"center\" key={index}>\n          <Box\n            sx={{\n              width: \"35px\",\n              height: \"15px\",\n              backgroundColor: `${c.color}`,\n              marginRight: \"15px\",\n            }}\n          ></Box>\n          <Typography>{c.label}</Typography>\n        </Box>\n      ))}\n\n      {totalCards > 0 ? (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <PieChart width={400} height={400}>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={renderCustomizedLabel}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={\n                    COLORS.map((color, id) => color.color)[\n                      index % COLORS.length\n                    ]\n                  }\n                />\n              ))}\n            </Pie>\n          </PieChart>\n        </ResponsiveContainer>\n      ) : (\n        <Box display=\"flex\" justifyContent=\"center\" sx={{ mt: 10 }}>\n          <Typography variant=\"subtitle1\" color=\"#808080\">\n            Add data to show chart\n          </Typography>\n        </Box>\n      )}\n    </>\n  );\n}\n"],"names":["COLORS","color","label","SmallPieChart","boards","useSelector","state","taskManager","totalCompletedCards","map","board","cards","filter","card","completed","length","reduce","a","b","totalCards","data","name","value","RADIAN","Math","PI","c","index","display","alignItems","sx","width","height","backgroundColor","marginRight","cx","cy","labelLine","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","dataKey","entry","id","justifyContent","mt","variant"],"sourceRoot":""}